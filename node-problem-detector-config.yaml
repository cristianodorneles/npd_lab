apiVersion: v1
data:
  kernel-monitor.json: |
    {
        "plugin": "kmsg",
        "logPath": "/dev/kmsg",
        "lookback": "5m",
        "bufferSize": 10,
        "source": "kernel-monitor",
        "conditions": [
            {
                "type": "KernelDeadlock",
                "reason": "KernelHasNoDeadlock",
                "message": "kernel has no deadlock"
            },
            {
                "type": "ReadonlyFilesystem",
                "reason": "FilesystemIsNotReadOnly",
                "message": "Filesystem is not read-only"
            }
        ],
        "rules": [
            {
                "type": "temporary",
                "reason": "OOMKilling",
                "pattern": "Kill process \\d+ (.+) score \\d+ or sacrifice child\\nKilled process \\d+ (.+) total-vm:\\d+kB, anon-rss:\\d+kB, file-rss:\\d+kB.*"
            },
            {
                "type": "temporary",
                "reason": "TaskHung",
                "pattern": "task \\S+:\\w+ blocked for more than \\w+ seconds\\."
            },
            {
                "type": "temporary",
                "reason": "UnregisterNetDevice",
                "pattern": "unregister_netdevice: waiting for \\w+ to become free. Usage count = \\d+"
            },
            {
                "type": "temporary",
                "reason": "KernelOops",
                "pattern": "BUG: unable to handle kernel NULL pointer dereference at .*"
            },
            {
                "type": "temporary",
                "reason": "KernelOops",
                "pattern": "divide error: 0000 \\[#\\d+\\] SMP"
            },
            {
                "type": "permanent",
                "condition": "KernelDeadlock",
                "reason": "AUFSUmountHung",
                "pattern": "task umount\\.aufs:\\w+ blocked for more than \\w+ seconds\\."
            },
            {
                "type": "permanent",
                "condition": "KernelDeadlock",
                "reason": "DockerHung",
                "pattern": "task docker:\\w+ blocked for more than \\w+ seconds\\."
            },
            {
                "type": "permanent",
                "condition": "ReadonlyFilesystem",
                "reason": "FilesystemIsReadOnly",
                "pattern": "Remounting filesystem read-only"
            }
        ]
    }
  docker-monitor.json: |
    {
        "plugin": "journald",
        "pluginConfig": {
            "source": "dockerd"
        },
        "logPath": "/var/log/journal",
        "lookback": "5m",
        "bufferSize": 10,
        "source": "docker-monitor",
        "conditions": [],
        "rules": [
            {
                "type": "temporary",
                "reason": "CorruptDockerImage",
                "pattern": "Error trying v2 registry: failed to register layer: rename /var/lib/docker/image/(.+) /var/lib/docker/image/(.+): directory not empty.*"
            }
        ]
    }
  log-monitor.json : |
    {
      "plugin": "custom",
      "pluginConfig": {
        "invoke_interval": "10s",
        "timeout": "5s",
        "max_output_length": 80,
        "concurrency": 3,
        "enable_message_change_based_condition_update": false
      },
      "source": "log-custom-plugin-monitor",
      "metricsReporting": true,
      "conditions": [
        {
          "type": "LogFlooding",
          "reason": "LogIsNotFlooding",
          "message": "Log file is growing health"
        }
      ],
      "rules": [
        {
          "type": "temporary",
          "reason" : "LogIsFlooding",
          "path": "./config/plugin/check_log.sh",
          "timeout": "3s"
        },
        {
          "type": "permanent",
          "condition": "LogFlooding",
          "reason" : "LogIsFlooding",
          "path": "./config/plugin/check_log.sh",
          "timeout": "3s"
        }
      ]
    } 
  check_log.sh: |
    #!/bin/bash
    if [ -f /tmp/log-last-check ]; then
      LASTSIZE="$(cat /tmp/log-last-check)"
      CURRENTSIZE="$(du -s /run/log/journal/*/system.journal)"
      if [ $(($CURRENTSIZE - $LASTSIZE)) -gt 250 ]; then
        echo $CURRENTSIZE > /tmp/log-last-check
        exit 1
      fi
    else
      du -s /run/log/journal/*/system.journal | cut -f1 > /tmp/log-last-check
    fi
    exit 0
  timeout-monitor.json : |
    {
      "plugin": "custom",
      "pluginConfig": {
        "invoke_interval": "60s",
        "timeout": "40s",
        "max_output_length": 80,
        "concurrency": 1,
        "enable_message_change_based_condition_update": false
      },
      "source": "timeout-custom-plugin-monitor",
      "metricsReporting": true,
      "conditions": [
        {
          "type": "PodAnswerTimeout",
          "reason": "PodIsReachable",
          "message": "Node can reach the pod"
        }
      ],
      "rules": [
        {
          "type": "temporary",
          "reason" : "PodUnreachable",
          "path": "./config/plugin/check_timeout.sh",
          "timeout": "40s"
        },
        {
          "type": "permanent",
          "condition": "PodAnswerTimeout",
          "reason" : "PodUnreachable",
          "path": "./config/plugin/check_timeout.sh",
          "timeout": "40s"
        }
      ]
    }
  check_timeout.sh: |
    #!/bin/bash
    #exec 3<>/dev/tcp/10.96.30.1/443 # dns
    exec 3<>/dev/tcp/10.244.104.20/80 # um pod qualquer
    if [ $? -ne 0 ]; then
        COUNT=$(cat /tmp/timeout-last-check)
        COUNT=$(($COUNT + 1))
        echo $COUNT > /tmp/timeout-last-check
        if [ $COUNT -ge 5 ]; then
            echo 'check_timeout' > /kured/reboot-required
            exit 1
        fi
    else
        echo 0 > /tmp/timeout-last-check
        if [ "$(grep check_timeout /kured/reboot-required)" != '' ]; then
            rm /kured/reboot-required
        fi
    fi
    exit 0

kind: ConfigMap
metadata:
  name: node-problem-detector-config
  namespace: kube-system
